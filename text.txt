$products = $this->getDoctrine()
            ->getRepository(Depanneur::class)
            ->findAll();
 
        $data = [];
 
        foreach ($products as $product) {
           $data[] = [
               'id' => $product->getId(),
               'nom' => $product->getNom(),
               'numero_tel' => $product->getNumeroTel(),
               'adresse' => $product->getAdress(),
               'mail' => $product->getMail(),
               'assurances' => $product->getNomAssurance(),
           ];
        }
 
 
        return $this->json($data);



























        
    /**
     * @Route("/depanneur/{id}", name="depanneur_edit", methods={"PUT"})
     */
    public function edit(Request $request, int $id): Response
    {
        $entityManager = $this->getDoctrine()->getManager();
        $depanneur = $entityManager->getRepository(Depanneur::class)->find($id);
 
        if (!$depanneur) {
            return $this->json('No depanneur found for id' . $id, 404);
        }
 
        $depanneur->setName($request->request->get('name'));
        $depanneur->setDescription($request->request->get('description'));
        $entityManager->flush();
 
        $data =  [
            'id' => $depanneur->getId(),
            'name' => $depanneur->getName(),
            'description' => $depanneur->getDescription(),
        ];
         
        return $this->json($data);
    }













    $client = $this->getDoctrine()
            ->getRepository(Client::class)
            ->find($id);
 
        if (!$client) {
 
            return $this->json('No client found for id' . $id, 404);
        }




post client








    /**
     * @Route("/client", name="client_index", methods={"GET"})
     */
    public function index(): Response
    {
        $products = $this->getDoctrine()
            ->getRepository(Client::class)
            ->findAll();
 
        $data = [];
 
        foreach ($products as $product) {
           $data[] = [
               'id' => $product->getId(),
               'nom' => $product->getNom(),
               'code' => $product->getCode(),
               'date_creation' => $product->getDateCreation(),
               'adresse' => $product->getAdresse(),
               'nombre_voitures' => $product->getNombreVoitures(),
               'status' => $product->getStatus(),
               'assurances' => $product->getAssurances(),
           ];
        }
 
 
        return $this->json($data);
    }












     Next:
 1) Install some missing packages:
      composer require symfonycasts/verify-email-bundle
 2) In RegistrationController::verifyUserEmail():
    * Customize the last redirectToRoute() after a successful email verification.
    * Make sure you're rendering success flash messages or change the $this->addFlash() line.
 3) Review and customize the form, controller, and templates as needed.
 4) Run "php bin/console make:migration" to generate a migration for the newly added User::isVerified property.

 Then open your browser, go to "/register" and enjoy your new form!


 
 Next:
   1) Run "php bin/console make:migration" to generate a migration for the new "App\Entity\ResetPasswordRequest" entity.
   2) Review forms in "src/Form" to customize validation and labels.
   3) Review and customize the templates in `templates/reset_password`.
   4) Make sure your MAILER_DSN env var has the correct settings.
   5) Create a "forgot your password link" to the app_forgot_password_request route on your login form.

 Then open your browser, go to "/reset-password" and enjoy!

























 security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\Authenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login
            json_login:
                check_path: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
